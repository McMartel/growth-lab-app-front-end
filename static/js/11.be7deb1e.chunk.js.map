{"version":3,"sources":["pages/jordanTool/jordan-dotted-map.svg","pages/jordanTool/fetchTestData.ts","components/text/BlowoutValue.tsx","pages/jordanTool/index.tsx"],"names":["module","exports","generateScatterPlotData","rawIndustryDatum","id","transformedData","forEach","datum","Code","Title","Keywords","Description","color","Math","round","random","x","floor","y","push","label","fill","rgba","highlighted","tooltipContent","tooltipContentOnly","tableColumns","key","tableData","schooling","women","men","Root","styled","div","Value","TextBlock","value","description","style","colorScheme","JordanTool","metaTitle","metaDescription","useState","undefined","selectedIndustry","setSelectedIndustry","variables","loading","setLoading","error","setError","industryData","setIndustryData","scatterPlotData","setScatterPlotData","viabilityData","setViabilityData","attractivenessData","setAttractivenessData","barChartData","setBarChartData","barChartData2","setBarChartData2","jordanMapData","JSON","parse","featuresWithValues","features","map","feature","i","percent","properties","jordanGeoJson","useEffect","a","csv","fromString","industryJson","parentIndex","length","findIndex","className","disabled","children","stroke","getIndustryData","data","useFetchTestData","navHeight","setNavHeight","stickyHeaderHeight","setStickyHeaderHeight","scrollBuffer","links","target","internalLink","useScrollBehavior","bufferTop","navAnchors","content","header","GradientHeader","title","hasSearch","imageProps","imgWidth","imageSrc","JordanLogoSVG","backgroundColor","textColor","linkColor","nav","console","searchLabelText","onChange","initialSelectedValue","industryName","scatterPlotNode","find","vizType","VizType","ScatterPlot","axisLabels","bottom","left","enablePNGDownload","enableSVGDownload","chartTitle","jsonToDownload","HowToReadDots","items","DynamicTable","columns","phase","intensive","extensive","fontSize","stickFirstCol","verticalGridLines","RadarChart","start","end","maxValue","BarChart","legendColor","BlowoutValue","GeoMap","minColor","lighten","maxColor","ColorScaleLegend","minLabel","maxLabel","Legend","legendList","lightBorderColor","StickySideNav","borderColor","hoverColor","borderTopColor","onHeightChange","h","marginTop","name","property","StickySubHeading","highlightColor","ExploreNextFooter","socialItems","type","SocialType","facebook","twitter","linkedin","exploreNextLinks","attributions"],"mappings":"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","file":"static/js/11.be7deb1e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/jordan-dotted-map.7315cdb4.svg\";","/* tslint:disable:await-promise */\nimport raw from 'raw.macro';\nimport {useEffect, useState} from 'react';\nimport csv from 'csvtojson';\nimport { TreeNode } from 'react-dropdown-tree-select';\nimport { Datum as ScatterPlotDatum } from '../../components/dataViz/scatterPlot';\nimport { Datum as RadarChartDatum } from '../../components/dataViz/radarChart';\nimport { Datum as BarChartDatum } from '../../components/dataViz/barChart';\nimport {rgba} from 'polished';\nimport {\n  Datum as DynamicTableDatum,\n  Column as DynamicTableColumn,\n} from '../../components/text/DynamicTable';\n\ninterface RawIndustryDatum {\n  Code: string;\n  Title: string;\n  Theme: string;\n  SubTheme: string;\n  Description: string;\n  Keywords: string;\n}\n\ninterface Input {\n  variables: {\n    id: string | null,\n  };\n}\n\n\nconst generateScatterPlotData = (rawIndustryDatum: RawIndustryDatum[], id: string): ScatterPlotDatum[] => {\n  const transformedData: ScatterPlotDatum[] = [];\n  rawIndustryDatum.forEach((datum) => {\n    const { Code, Title, Keywords, Description } = datum;\n    const color = Math.round(Math.random()) === 0 ? '#46899F' : '#E0B04E';\n    const x = Math.floor((Math.random() * 100) + 1);\n    const y = Math.floor((Math.random() * 100) + 1);\n    transformedData.push({\n      label: Title,\n      x,\n      y,\n      fill: rgba(color, 0.5),\n      highlighted: (Code === id),\n      tooltipContent:\n        '<strong>Theme:</strong> ' + Description +\n        '<br /><strong>SubTheme:</strong> ' + Keywords +\n        '<br /><strong>Description:</strong> ' + Title +\n        '<br /><strong>Viability:</strong> ' + x +\n        '<br /><strong>Attractiveness:</strong> ' + y,\n      tooltipContentOnly: true,\n    });\n  });\n  return transformedData;\n};\n\nconst generateViabilityData = () => {\n  return [\n    [\n      {label: 'RCA Jordan', value: Math.floor((Math.random() * 100) + 1)},\n      {label: 'RCA Peers', value: Math.floor((Math.random() * 100) + 1)},\n      {label: 'Water Intensity', value: Math.floor((Math.random() * 100) + 1)},\n      {label: 'Electricity Intensity', value: Math.floor((Math.random() * 100) + 1)},\n      {label: 'Avail. of Inputs', value: Math.floor((Math.random() * 100) + 1)},\n    ],\n  ];\n};\nconst generateAttractivenessData = () => {\n  return [\n    [\n      {label: 'Female Employment', value: Math.floor((Math.random() * 100) + 1)},\n      {label: 'H. Skill Employ.', value: Math.floor((Math.random() * 100) + 1)},\n      {label: 'FDI World', value: Math.floor((Math.random() * 100) + 1)},\n      {label: 'FDI Region', value: Math.floor((Math.random() * 100) + 1)},\n      {label: 'Exp. Propen.', value: Math.floor((Math.random() * 100) + 1)},\n    ],\n  ];\n};\n\nconst generateBarChartData = () => {\n  return [\n    [\n      {\n        x: '2004-2006',\n        y: 12000000,\n        fill: '#E0E0E0',\n      },\n      {\n        x: '2007-2009',\n        y: 38000000,\n        fill: '#E0E0E0',\n      },\n      {\n        x: '2010-2012',\n        y: 22000000,\n        fill: '#E0E0E0',\n      },\n      {\n        x: '2013-2015',\n        y: 9000000,\n        fill: '#E0E0E0',\n      },\n      {\n        x: '2016-2018',\n        y: 34000000,\n        fill: '#E0E0E0',\n      },\n    ],\n    [\n      {\n        x: '2004-2006',\n        y: Math.floor((Math.random() * 10000000) + 1),\n        fill: '#46899F',\n      },\n      {\n        x: '2007-2009',\n        y: Math.floor((Math.random() * 30000000) + 1),\n        fill: '#46899F',\n      },\n      {\n        x: '2010-2012',\n        y: Math.floor((Math.random() * 20000000) + 1),\n        fill: '#46899F',\n      },\n      {\n        x: '2013-2015',\n        y: Math.floor((Math.random() * 8000000) + 1),\n        fill: '#46899F',\n      },\n      {\n        x: '2016-2018',\n        y: Math.floor((Math.random() * 30000000) + 1),\n        fill: '#46899F',\n      },\n    ],\n  ];\n};\nconst generateBarChartData2 = () => {\n  return [\n    [\n      {\n        x: '2004-2006',\n        y: 12000000,\n        fill: '#E0E0E0',\n      },\n      {\n        x: '2007-2009',\n        y: 38000000,\n        fill: '#E0E0E0',\n      },\n      {\n        x: '2010-2012',\n        y: 22000000,\n        fill: '#E0E0E0',\n      },\n      {\n        x: '2013-2015',\n        y: 9000000,\n        fill: '#E0E0E0',\n      },\n      {\n        x: '2016-2018',\n        y: 34000000,\n        fill: '#E0E0E0',\n      },\n    ],\n    [\n      {\n        x: '2004-2006',\n        y: Math.floor((Math.random() * 10000000) + 1),\n        fill: 'transparent',\n        stroke: '#46899F',\n      },\n      {\n        x: '2007-2009',\n        y: Math.floor((Math.random() * 30000000) + 1),\n        fill: 'transparent',\n        stroke: '#46899F',\n      },\n      {\n        x: '2010-2012',\n        y: Math.floor((Math.random() * 20000000) + 1),\n        fill: 'transparent',\n        stroke: '#46899F',\n      },\n      {\n        x: '2013-2015',\n        y: Math.floor((Math.random() * 8000000) + 1),\n        fill: 'transparent',\n        stroke: '#46899F',\n      },\n      {\n        x: '2016-2018',\n        y: Math.floor((Math.random() * 30000000) + 1),\n        fill: 'transparent',\n        stroke: '#46899F',\n      },\n    ],\n  ];\n};\n\nconst tableColumns: DynamicTableColumn[] = [\n  {label: 'Schooling', key: 'schooling'},\n  {label: 'Women', key: 'women'},\n  {label: 'Men', key: 'men'},\n];\nconst tableData: DynamicTableDatum[] = [\n  {schooling: 'Below ES', women: '5%', men: '18%'},\n  {schooling: 'Below BE', women: '0.7%', men: '1.8%'},\n  {schooling: 'Basic Education', women: '0.7%', men: '8%'},\n  {schooling: 'HS or Apprenticeship', women: '0.5%', men: '0.8%'},\n  {schooling: 'Intermediate diploma', women: '1.5%', men: '0.1%'},\n  {schooling: 'University and more', women: '15%', men: '1%'},\n];\n\nexport default ({variables: {id}}: Input) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<undefined | string>(undefined);\n  const [industryData, setIndustryData] = useState<undefined | TreeNode[]>(undefined);\n  const [scatterPlotData, setScatterPlotData] = useState<ScatterPlotDatum[]>([]);\n  const [viabilityData, setViabilityData] = useState<RadarChartDatum[][]>([]);\n  const [attractivenessData, setAttractivenessData] = useState<RadarChartDatum[][]>([]);\n  const [barChartData, setBarChartData] = useState<BarChartDatum[][]>([]);\n  const [barChartData2, setBarChartData2] = useState<BarChartDatum[][]>([]);\n\n  const jordanMapData = JSON.parse(raw('./data/jordanmap.json'));\n  const featuresWithValues = jordanMapData.features.map((feature: any, i: number) => {\n    const percent = (i + 1) * 7;\n    const properties = {...feature.properties, percent, tooltipContent: `${percent}%`};\n    return {...feature, properties};\n  });\n  const jordanGeoJson = {...jordanMapData, features: featuresWithValues};\n\n  useEffect(() => {\n    const getIndustryData = async () => {\n      try {\n        const industryJson: RawIndustryDatum[] = await csv().fromString(raw('./data/industry.csv'));\n        const transformedData: TreeNode[] = [];\n        industryJson.forEach(({Code, Title, Description}) => {\n          const parentIndex = transformedData.length\n            ? transformedData.findIndex(({value}) => value === Description) : -1;\n          if (parentIndex === -1) {\n            // parent does not exist, create new entry\n            transformedData.push({\n              label: Description,\n              value: Description,\n              className: 'no-select-parent',\n              disabled: true,\n              children: [{\n                label: Title,\n                value: Code,\n                disabled: false,\n              }],\n            });\n          } else {\n            // parent already exists, push to existing parent\n            transformedData[parentIndex].children.push({\n              label: Title,\n              value: Code,\n              disabled: false,\n            });\n          }\n        });\n        setIndustryData(transformedData);\n        if (id !== null) {\n          setScatterPlotData(generateScatterPlotData(industryJson, id));\n          setViabilityData(generateViabilityData());\n          setAttractivenessData(generateAttractivenessData());\n          setBarChartData(generateBarChartData());\n          setBarChartData2(generateBarChartData2());\n        }\n        setLoading(false);\n      } catch (e) {\n        setError(e);\n        setLoading(false);\n      }\n    };\n    getIndustryData();\n  }, [id]);\n\n  return {\n    error,\n    loading,\n    data: {\n      industryData, scatterPlotData, viabilityData, attractivenessData, barChartData,\n      jordanGeoJson, barChartData2, tableColumns, tableData,\n    },\n  };\n};","import React from 'react';\nimport styled from 'styled-components';\n\nconst Root = styled.div`\n  padding: 1rem;\n  text-align: center;\n`;\n\nconst Value = styled.div`\n  font-weight: 600;\n  font-size: 3.75rem;\n`;\n\ninterface Props {\n  color: string;\n  value: string;\n  description: string;\n}\n\nconst TextBlock = ({value, color, description}: Props) => {\n  return (\n    <Root>\n      <Value style={{color}}>{value}</Value>\n      <p>{description}</p>\n    </Root>\n  );\n};\n\nexport default TextBlock;","import React, {useState} from 'react';\nimport Helmet from 'react-helmet';\nimport GradientHeader from '../../components/text/headers/GradientHeader';\nimport { Content } from '../../styling/Grid';\nimport StickySubHeading from '../../components/text/StickySubHeading';\nimport ExploreNextFooter, {SocialType} from '../../components/text/ExploreNextFooter';\nimport useFetchTestData from './fetchTestData';\nimport { TreeNode } from 'react-dropdown-tree-select';\nimport DataViz, {VizType} from '../../components/dataViz';\nimport {\n  TwoColumnSection,\n  SectionHeader,\n  SmallParagraph,\n  SubSectionHeader,\n  ParagraphHeader,\n  HeaderWithLegend,\n  Light,\n  SectionHeaderSecondary,\n  InlineTwoColumnSection,\n  lightBorderColor,\n} from '../../styling/styleUtils';\nimport Legend from '../../components/dataViz/Legend';\nimport HowToReadDots from '../../components/dataViz/HowToReadDots';\nimport ColorScaleLegend from '../../components/dataViz/ColorScaleLegend';\nimport DynamicTable from '../../components/text/DynamicTable';\nimport TextBlock from '../../components/text/TextBlock';\nimport BlowoutValue from '../../components/text/BlowoutValue';\nimport {lighten, rgba} from 'polished';\nimport StickySideNav, { NavItem } from '../../components/navigation/StickySideNav';\nimport useScrollBehavior from '../../hooks/useScrollBehavior';\nimport JordanLogoSVG from './jordan-dotted-map.svg';\n\nconst colorScheme = {\n  primary: '#46899F',\n  secondary: '#E0B04E',\n  teriary: '#9ac5d3',\n  quaternary: '#ecf0f2',\n};\n\n const JordanTool = () => {\n  const metaTitle = 'A Roadmap for Export Diversification: Jordan’s Complexity Profile';\n  const metaDescription = 'This tool displays the results of the complexity analysis developed for Jordan by the Growth Lab at Harvard University.';\n\n  const [selectedIndustry, setSelectedIndustry] = useState<TreeNode | undefined>(undefined);\n  const {data, loading, error} = useFetchTestData({variables: {\n    id: selectedIndustry ? selectedIndustry.value : null,\n  }});\n\n  const [navHeight, setNavHeight] = useState<number>(0);\n  const [stickyHeaderHeight, setStickyHeaderHeight] = useState<number>(0);\n  const scrollBuffer = navHeight + stickyHeaderHeight;\n\n  const links: NavItem[] = [\n    {label: 'Overview', target: '#overview', internalLink: true, scrollBuffer},\n    {label: 'Industry Potential', target: '#industry-potential', internalLink: true, scrollBuffer},\n    {label: 'Industry Now', target: '#industry-now', internalLink: true, scrollBuffer},\n  ];\n  useScrollBehavior({\n    bufferTop: scrollBuffer,\n    navAnchors: links.map(({target}) => target),\n  });\n\n  let header: React.ReactElement<any> = (\n    <GradientHeader\n      title={metaTitle}\n      hasSearch={false}\n      imageProps={{\n        imgWidth: '150px',\n      }}\n      imageSrc={JordanLogoSVG}\n      backgroundColor={colorScheme.primary}\n      textColor={'#fff'}\n      linkColor={'#fff'}\n    />\n  );\n  let content: React.ReactElement<any> | null;\n  let nav: React.ReactElement<any> | null = null;\n  if (loading) {\n    content = null;\n  } else if (error) {\n    console.error(error);\n    content = null;\n  } else if (data !== undefined) {\n    const {\n      industryData, scatterPlotData, viabilityData, attractivenessData,\n      barChartData, jordanGeoJson, barChartData2, tableColumns, tableData,\n    } = data;\n    if (industryData) {\n      if (selectedIndustry === undefined) {\n        setSelectedIndustry(industryData[0].children[0]);\n      }\n      header = (\n        <GradientHeader\n          title={metaTitle}\n          hasSearch={true}\n          searchLabelText={'To Start Select an Industry:'}\n          imageSrc={JordanLogoSVG}\n          data={industryData}\n          onChange={setSelectedIndustry}\n          initialSelectedValue={industryData[0].children[0]}\n          imageProps={{\n            imgWidth: '150px',\n          }}\n          backgroundColor={colorScheme.primary}\n          textColor={'#fff'}\n          linkColor={'#fff'}\n        />\n      );\n    }\n    const industryName: string = selectedIndustry ? selectedIndustry.label : '';\n    const scatterPlotNode = scatterPlotData.find(({label}) => label === industryName);\n    const highlighted = scatterPlotNode ? {\n      color: scatterPlotNode.fill ? scatterPlotNode.fill : '#666',\n      label: industryName,\n    } : undefined;\n    content = (\n      <>\n        <TwoColumnSection id={'overview'}>\n          <SectionHeader>Overview</SectionHeader>\n          <DataViz\n            id={'albania-scatterplot'}\n            vizType={VizType.ScatterPlot}\n            data={scatterPlotData}\n            axisLabels={{bottom: 'Viability', left: 'Attractiveness'}}\n            enablePNGDownload={true}\n            enableSVGDownload={true}\n            chartTitle={'Overview - ' + industryName}\n            jsonToDownload={scatterPlotData}\n          />\n          <TextBlock>\n            <p>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n            </p>\n            <p>\n              Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            </p>\n            <HowToReadDots\n              items={[\n                {color: rgba(colorScheme.primary, 0.5), label: 'RCA < 1'},\n                {color: rgba(colorScheme.secondary, 0.5), label: 'RCA ≥ 1'},\n              ]}\n              highlighted={highlighted}\n            />\n            <DynamicTable\n              columns={[\n                {label: '', key: 'phase'},\n                {label: 'Intensive (RCA ≥ 1', key: 'intensive'},\n                {label: 'Extensive (RCA < 1', key: 'extensive'},\n              ]}\n              data={[\n                {phase: 'Phase 0', intensive: 'Above median Attractiveness', extensive: ''},\n                {phase: 'Phase 1', intensive: '', extensive: 'Above median in both Attractiveness and Viability'},\n                {phase: 'Phase 2', intensive: 'Below median Attractiveness', extensive: 'Above median in either Attractiveness and Viability'},\n                {phase: 'Phase 4', intensive: '', extensive: 'Below median in both Attractiveness and Viability'},\n              ]}\n              fontSize={'0.85rem'}\n              stickFirstCol={true}\n              verticalGridLines={true}\n            />\n          </TextBlock>\n        </TwoColumnSection>\n        <TwoColumnSection>\n          <DataViz\n            id={'albania-spyder-chart-2'}\n            vizType={VizType.RadarChart}\n            data={viabilityData}\n            color={{start: colorScheme.primary, end: colorScheme.primary}}\n            maxValue={100}\n            enablePNGDownload={true}\n            enableSVGDownload={true}\n            chartTitle={'Viability Factors - ' + industryName}\n            jsonToDownload={viabilityData[0]}\n          />\n          <TextBlock>\n            <SubSectionHeader color={colorScheme.primary}>Viability Factors</SubSectionHeader>\n            <ParagraphHeader color={colorScheme.primary}>RCA in Jordan</ParagraphHeader>\n            <SmallParagraph>\n              Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            </SmallParagraph>\n            <ParagraphHeader color={colorScheme.primary}>RCA in Peers</ParagraphHeader>\n            <SmallParagraph>\n              Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            </SmallParagraph>\n            <ParagraphHeader color={colorScheme.primary}>Water Intensity</ParagraphHeader>\n            <SmallParagraph>\n              Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            </SmallParagraph>\n            <ParagraphHeader color={colorScheme.primary}>Electricity Intensity</ParagraphHeader>\n            <SmallParagraph>\n              Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            </SmallParagraph>\n            <ParagraphHeader color={colorScheme.primary}>Availability of Inputs</ParagraphHeader>\n            <SmallParagraph>\n              Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            </SmallParagraph>\n          </TextBlock>\n        </TwoColumnSection>\n        <TwoColumnSection>\n          <DataViz\n            id={'albania-spyder-chart-3'}\n            vizType={VizType.RadarChart}\n            data={attractivenessData}\n            color={{start: colorScheme.primary, end: colorScheme.primary}}\n            maxValue={100}\n            enablePNGDownload={true}\n            enableSVGDownload={true}\n            chartTitle={'Attractiveness Factors - ' + industryName}\n            jsonToDownload={attractivenessData[0]}\n          />\n          <TextBlock>\n            <SubSectionHeader color={colorScheme.primary}>Attractiveness Factors</SubSectionHeader>\n            <ParagraphHeader color={colorScheme.primary}>Female Employment Potential</ParagraphHeader>\n            <SmallParagraph>\n              Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            </SmallParagraph>\n            <ParagraphHeader color={colorScheme.primary}>High Skill Employment Potential</ParagraphHeader>\n            <SmallParagraph>\n              Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            </SmallParagraph>\n            <ParagraphHeader color={colorScheme.primary}>FDI in the World</ParagraphHeader>\n            <SmallParagraph>\n              Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            </SmallParagraph>\n            <ParagraphHeader color={colorScheme.primary}>FDI in the Region</ParagraphHeader>\n            <SmallParagraph>\n              Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            </SmallParagraph>\n            <ParagraphHeader color={colorScheme.primary}>Export Propensity</ParagraphHeader>\n            <SmallParagraph>\n              Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            </SmallParagraph>\n          </TextBlock>\n        </TwoColumnSection>\n        <TwoColumnSection id={'industry-potential'}>\n          <SectionHeader>Industry potential</SectionHeader>\n        </TwoColumnSection>\n        <TwoColumnSection>\n          <SectionHeaderSecondary color={colorScheme.primary}>Foreign Direct Investment</SectionHeaderSecondary>\n          <DataViz\n            id={'albania-company-bar-chart'}\n            vizType={VizType.BarChart}\n            data={barChartData}\n            axisLabels={{left: 'US$ Millions'}}\n            enablePNGDownload={true}\n            enableSVGDownload={true}\n            chartTitle={'Identifying Companies - ' + industryName}\n            jsonToDownload={barChartData[0]}\n          />\n          <InlineTwoColumnSection>\n            <TextBlock>\n              <HeaderWithLegend legendColor={colorScheme.primary}>\n                <div>\n                  Top Global FDI Companies\n                </div>\n              </HeaderWithLegend>\n              <ol>\n                <li>Planet Food World (PFWC), <Light>Suadi Arabia</Light>\n                </li>\n                <li>Biopalm Energy, <Light>India</Light>\n                </li>\n                <li>Al-Bader International Development, <Light>Kuwait</Light>\n                </li>\n                <li>Heilongjiang Beidahuang, <Light>China</Light>\n                </li>\n                <li>Chongqing Grain Group, <Light>China</Light>\n                </li>\n                <li>Charoen Pokphand Group, <Light>Thailand</Light>\n                </li>\n                <li>Fresh Del Monte Produce, <Light>United States of America</Light>\n                </li>\n                <li>Herakles Farms, <Light>United States of America</Light>\n                </li>\n                <li>Nader &amp; Ebrahim, <Light>Bahrain</Light>\n                </li>\n                <li>Rijk Zwaan, <Light>Netherlands</Light>\n                </li>\n              </ol>\n            </TextBlock>\n            <TextBlock>\n              <HeaderWithLegend legendColor={colorScheme.primary}>\n                <div>\n                  Top FDI Investors in MENA\n                </div>\n              </HeaderWithLegend>\n              <ol>\n                <li>Planet Food World (PFWC), <Light>Suadi Arabia</Light>\n                </li>\n                <li>Biopalm Energy, <Light>India</Light>\n                </li>\n                <li>Al-Bader International Development, <Light>Kuwait</Light>\n                </li>\n                <li>Heilongjiang Beidahuang, <Light>China</Light>\n                </li>\n                <li>Chongqing Grain Group, <Light>China</Light>\n                </li>\n                <li>Charoen Pokphand Group, <Light>Thailand</Light>\n                </li>\n                <li>Fresh Del Monte Produce, <Light>United States of America</Light>\n                </li>\n                <li>Herakles Farms, <Light>United States of America</Light>\n                </li>\n                <li>Nader &amp; Ebrahim, <Light>Bahrain</Light>\n                </li>\n                <li>Rijk Zwaan, <Light>Netherlands</Light>\n                </li>\n              </ol>\n            </TextBlock>\n          </InlineTwoColumnSection>\n        </TwoColumnSection>\n        <TwoColumnSection>\n          <BlowoutValue\n            value={'24%'}\n            color={colorScheme.primary}\n            description={'Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.'}\n          />\n          <BlowoutValue\n            value={'22%'}\n            color={colorScheme.primary}\n            description={'Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.'}\n          />\n        </TwoColumnSection>\n        <TwoColumnSection id={'industry-now'}>\n          <SectionHeader>Industry Now</SectionHeader>\n        </TwoColumnSection>\n        <TwoColumnSection>\n          <SectionHeaderSecondary color={colorScheme.primary}>Sector Demographics</SectionHeaderSecondary>\n          <DynamicTable\n            columns={tableColumns}\n            data={tableData}\n            color={colorScheme.primary}\n          />\n          <TextBlock>\n            <p>\n              Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            </p>\n          </TextBlock>\n        </TwoColumnSection>\n        <TwoColumnSection>\n          <SectionHeaderSecondary color={colorScheme.primary}>Location of Workers</SectionHeaderSecondary>\n          <DataViz\n            id={'albania-geo-map'}\n            vizType={VizType.GeoMap}\n            data={jordanGeoJson}\n            minColor={lighten(0.5, colorScheme.primary)}\n            maxColor={colorScheme.primary}\n          />\n          <TextBlock>\n            <p>\n              Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            </p>\n            <ColorScaleLegend\n              minLabel={0.28}\n              maxLabel={30.8}\n              minColor={lighten(0.5, colorScheme.primary)}\n              maxColor={colorScheme.primary}\n              title={'Percentage of workers in the industry'}\n            />\n          </TextBlock>\n        </TwoColumnSection>\n        <TwoColumnSection>\n          <SectionHeaderSecondary color={colorScheme.primary}>Schooling Distribution</SectionHeaderSecondary>\n          <DynamicTable\n            columns={tableColumns}\n            data={tableData}\n            color={colorScheme.primary}\n          />\n          <TextBlock>\n            <p>\n              Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            </p>\n          </TextBlock>\n        </TwoColumnSection>\n        <TwoColumnSection>\n          <SectionHeaderSecondary color={colorScheme.primary}>Industry Wages</SectionHeaderSecondary>\n          <DynamicTable\n            columns={tableColumns}\n            data={tableData}\n            color={colorScheme.primary}\n          />\n          <TextBlock>\n            <p>\n              Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            </p>\n          </TextBlock>\n        </TwoColumnSection>\n        <TwoColumnSection>\n          <DataViz\n            id={'albania-company-bar-chart-2'}\n            vizType={VizType.BarChart}\n            data={barChartData2}\n            axisLabels={{left: 'US$ Millions'}}\n          />\n          <TextBlock>\n            <p>\n              Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            </p>\n            <Legend\n              legendList={[\n                {label: 'Industry', fill: lightBorderColor, stroke: undefined},\n                {label: 'Country', fill: undefined, stroke: colorScheme.primary},\n              ]}\n            />\n          </TextBlock>\n        </TwoColumnSection>\n        <TwoColumnSection>\n          <SectionHeaderSecondary color={colorScheme.primary}>Occupation Distribution</SectionHeaderSecondary>\n          <DynamicTable\n            columns={tableColumns}\n            data={tableData}\n            color={colorScheme.primary}\n          />\n          <TextBlock>\n            <p>\n              Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n            </p>\n          </TextBlock>\n        </TwoColumnSection>\n      </>\n    );\n    nav = (\n      <StickySideNav\n        links={links}\n        backgroundColor={colorScheme.quaternary}\n        borderColor={colorScheme.primary}\n        hoverColor={colorScheme.teriary}\n        borderTopColor={'#fff'}\n        onHeightChange={(h) => setNavHeight(h)}\n        marginTop={stickyHeaderHeight + 'px'}\n      />\n    );\n  } else {\n    content = null;\n  }\n  return (\n    <>\n      <Helmet>\n        <title>{metaTitle}</title>\n        <meta name='description' content={metaDescription} />\n        <meta property='og:title' content={metaTitle} />\n        <meta property='og:description' content={metaDescription} />\n      </Helmet>\n      {header}\n      {nav}\n      <Content>\n        <StickySubHeading\n          title={selectedIndustry ? selectedIndustry.label : ''}\n          highlightColor={colorScheme.secondary}\n          onHeightChange={(h) => setStickyHeaderHeight(h)}\n        />\n        {content}\n      </Content>\n      <ExploreNextFooter\n        backgroundColor={colorScheme.primary}\n        socialItems={[\n          {\n            target: 'https://www.facebook.com/HarvardCID/',\n            type: SocialType.facebook,\n          },\n          {\n            target: 'https://twitter.com/HarvardGrwthLab',\n            type: SocialType.twitter,\n          },\n          {\n            target: 'https://www.linkedin.com/company/center-for-international-development-harvard-university/',\n            type: SocialType.linkedin,\n          },\n        ]}\n        exploreNextLinks={[\n          {\n            label: 'Country Profile',\n            target: 'https://atlas.cid.harvard.edu/countries/113',\n          },\n        ]}\n        attributions={[\n          'Growth Lab’s Jordan Research Team:  -----',\n          'Growth Lab’s Digital Development & Design Team:  Annie White, Brendan Leonard, Nil Tuzcu and Kyle Soeltz.',\n        ]}\n      />\n    </>\n  );\n };\n\n export default JordanTool;"],"sourceRoot":""}
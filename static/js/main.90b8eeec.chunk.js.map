{"version":3,"sources":["styling/styleUtils.ts","routing/routes.ts","styling/Grid.ts","styling/GlobalStyles.tsx","App.tsx","components/general/Loading.tsx","serviceWorker.ts","index.tsx"],"names":["baseColor","lightBaseColor","lightBorderColor","primaryFont","secondaryFont","semiBoldFontBoldWeight","Light","styled","span","StandardH1","h1","HeaderWithLegend","h4","legendColor","Label","label","TwoColumnSectionBase","div","columnDefs","TwoColumnSection","InlineTwoColumnSection","SectionHeaderBase","h3","SectionHeader","SectionHeaderSecondary","color","SubSectionHeader","ParagraphHeader","h5","SmallParagraph","p","Card","ol","Routes","gridLines","gridSmallMediaWidth","Root","FullWidthHeader","header","FullWidthHeaderContent","contentMaxWidth","Content","main","ContentFull","NavContainer","nav","FullWidthFooter","footer","FullWidthFooterContent","GlobalStyles","createGlobalStyle","LandingPage","lazy","AlbaniaTool","JordanTool","PageNotFound","AppContext","createContext","windowWidth","window","innerWidth","client","ApolloClient","uri","App","useState","setWindowWidth","appContext","useEffect","updateWindowWidth","debounce","addEventListener","removeEventListener","defaultMetaTitle","defaultMetaDescription","basename","location","host","undefined","Provider","value","name","content","property","fallback","Loading","exact","path","Landing","render","props","component","Ring","animation","keyframes","ChildBase","FirstChild","SecondChild","ThirdChild","Text","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.90b8eeec.chunk.js","sourcesContent":["import styled from 'styled-components/macro';\n\nexport const baseColor = '#333333'; // dark gray/black color for text\nexport const lightBaseColor = '#7c7c7c'; // light gray color for subtitles and contextual information\nexport const lightBorderColor = '#dcdcdc'; // really light gray color for subtle borders between elements\n\nexport const tertiaryColor = '#f3f3f3'; // really light gray color for use as a hover background color on cards\n\nexport const primaryFont = \"'Source Sans Pro', sans-serif\";\nexport const secondaryFont = \"'OfficeCodeProWeb', monospace\";\n\nexport const semiBoldFontBoldWeight = 600;\nexport const boldFontWeight = 700;\n\nexport const Light = styled.span`\n  color: ${lightBaseColor};\n`;\n\nexport const StandardH1 = styled.h1`\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  font-size: 2.2rem;\n  font-weight: 400;\n`;\n\ninterface HeaderWithLegendProps {\n  legendColor: string;\n}\n\nexport const HeaderWithLegend = styled.h4<HeaderWithLegendProps>`\n  margin-top: 0;\n  display: flex;\n  align-items: center;\n  font-weight: 400;\n  font-size: 1.1rem;\n\n  &:before {\n    content: '';\n    display: inline-block;\n    width: 1.5rem;\n    height: 1.5rem;\n    background-color: ${({legendColor}) => legendColor};\n    margin-right: 0.5rem;\n  }\n`;\n\nexport const labelMarginBottom = 0.3; // in rem\n\nexport const Label = styled.label`\n  font-family: ${secondaryFont};\n  margin-bottom: ${labelMarginBottom}rem;\n  display: block;\n`;\n\ninterface TwoColumnSectionProps {\n  columnDefs?: string;\n}\n\nexport const TwoColumnSectionBase = styled.div<TwoColumnSectionProps>`\n  display: grid;\n  grid-template-rows: auto auto;\n  grid-template-columns: ${({columnDefs}) => columnDefs ? columnDefs : '1fr 1fr'};\n`;\n\nexport const TwoColumnSection = styled(TwoColumnSectionBase)`\n  margin-bottom: 2rem;\n\n  @media (max-width: 850px) {\n    grid-template-columns: auto;\n    grid-template-rows: auto auto auto;\n  }\n`;\nexport const InlineTwoColumnSection = styled(TwoColumnSectionBase)`\n  @media (max-width: 850px) {\n    padding: 1rem;\n  }\n\n  @media (max-width: 500px) {\n    grid-template-columns: auto;\n    grid-template-rows: auto auto auto;\n  }\n`;\n\nconst SectionHeaderBase = styled.h3`\n  grid-row: 1;\n  grid-column: 1 / -1;\n  font-family: ${secondaryFont};\n  color: ${baseColor};\n  letter-spacing: 1px;\n`;\n\nexport const SectionHeader = styled(SectionHeaderBase)`\n  display: flex;\n  align-items: center;\n  font-size: 1.4rem;\n  text-transform: uppercase;\n  font-weight: 400;\n\n  &:after {\n    content: '';\n    display: block;\n    height: 0;\n    border-top: 2px solid ${lightBorderColor};\n    flex-grow: 1;\n    margin-left: 1.25rem;\n  }\n`;\n\ninterface TitleColorProps {\n  color?: string;\n}\n\nexport const SectionHeaderSecondary = styled(SectionHeaderBase)<TitleColorProps>`\n  font-size: 1.2rem;\n  text-transform: uppercase;\n  font-weight: 600;\n  color: ${({color}) => color ? color : baseColor};\n`;\n\nexport const SubSectionHeader = styled.h4<TitleColorProps>`\n  margin-top: 0;\n  font-weight: 600;\n  text-transform: uppercase;\n  font-size: 1.2rem;\n  letter-spacing: 1px;\n  font-family: ${secondaryFont};\n  color: ${({color}) => color ? color : baseColor};\n`;\n\nexport const ParagraphHeader = styled.h5<TitleColorProps>`\n  font-family: ${secondaryFont};\n  letter-spacing: 1px;\n  display: flex;\n  align-items: center;\n  margin: 0 0 0.5rem;\n  color: ${({color}) => color ? color : baseColor};\n\n  &:after {\n    content: '';\n    display: block;\n    height: 0;\n    border-top: 2px solid ${lightBorderColor};\n    flex-grow: 1;\n    margin-left: 1rem;\n  }\n`;\n\nexport const NarrowPaddedColumn = styled.div`\n  padding: 0 0.5rem;\n`;\n\nexport const LargeParagraph = styled.p`\n  font-size: 1.2rem;\n  margin-bottom: 2rem;\n`;\n\nexport const SmallParagraph = styled.p`\n  font-size: 0.8rem;\n`;\n\nexport const SmallOrderedList = styled.ol`\n  li {\n    font-size: 0.8rem;\n  }\n`;\n\nexport const Card = styled.div`\n  padding: 0.7rem;\n  border: solid 1px ${lightBorderColor};\n  box-shadow: 0px 0px 3px -1px #b5b5b5;\n  margin-bottom: 2rem;\n  background-color: #fff;\n\n  &:hover {\n    cursor: pointer;\n    background-color: ${tertiaryColor};\n  }\n`;\n","export enum Routes {\n  Landing = '/',\n  AlbaniaTool = '/albania-tool',\n  JordanTool = '/jordan-tool',\n}","import styled from 'styled-components/macro';\n\n\nconst gridLines = {\n  // Horizontal Grid Lines\n  pageTop: 'countryToolsGlobalGridPageTop',\n  bannerTop: 'countryToolsGlobalGridBannerTop',\n  bannerBottom: 'countryToolsGlobalGridBannerBottom',\n  headerTop: 'countryToolsGlobalGridHeaderTop',\n  headerBottom: 'countryToolsGlobalGridHeaderBottom',\n  mobileMenuTop: 'countryToolsGlobalGridMobileMenuTop',\n  mobileMenuBottom: 'countryToolsGlobalGridMobileMenuBottom',\n  contentTop: 'countryToolsGlobalGridContentTop',\n  contentBottom: 'countryToolsGlobalGridContentBottom',\n  footerTop: 'countryToolsGlobalGridFooterTop',\n  footerBottom: 'countryToolsGlobalGridFooterBottom',\n  pageBottom: 'countryToolsGlobalGridPageBottom',\n  // Vertical Grid Lines\n  pageLeft: 'countryToolsGlobalGridPageLeft',\n  pageMarginLeft: 'countryToolsPageMarginLeft',\n  contentStart: 'countryToolsContentStart',\n  contentEnd: 'countryToolsContentEnd',\n  navStart: 'countryToolsNavStart',\n  navEnd: 'countryToolsNavEnd',\n  pageMarginRight: 'countryToolsPageMarginLeft',\n  pageRight: 'countryToolsGlobalGridPageRight',\n};\n\nexport const gridSmallMediaWidth = 700; // in px\n\nconst contentMaxWidth = 900; // in px\nconst navMaxWidth = 180; // in px\n\n\nexport const Root = styled.div`\n  display: grid;\n  min-height: 100vh;\n  grid-template-rows:\n    [${gridLines.pageTop} ${gridLines.bannerTop}] auto\n    [${gridLines.bannerBottom} ${gridLines.headerTop}] auto\n    [${gridLines.headerBottom} ${gridLines.mobileMenuTop}] auto\n    [${gridLines.mobileMenuBottom} ${gridLines.contentTop}] 1fr\n    [${gridLines.contentBottom} ${gridLines.footerTop}] auto\n    [${gridLines.footerBottom} ${gridLines.pageBottom}];\n\n  grid-template-columns:\n    [${gridLines.pageLeft} ${gridLines.pageMarginLeft}] minmax(1rem, 1fr)\n    [${gridLines.contentStart}] minmax(auto, ${contentMaxWidth}px)\n    [${gridLines.contentEnd} ${gridLines.navStart}]  minmax(auto, ${navMaxWidth}px)\n    [${gridLines.navEnd} ${gridLines.pageMarginRight}] minmax(1rem, 1fr)\n    [${gridLines.pageRight}];\n`;\n\nexport const FullWidthHeader = styled.header`\n  grid-row: ${gridLines.headerTop} / ${gridLines.headerBottom};\n  grid-column: ${gridLines.pageLeft} / ${gridLines.pageRight};\n`;\nexport const FullWidthHeaderContent = styled.div`\n  max-width: ${contentMaxWidth + navMaxWidth}px;\n  margin: 0 auto;\n`;\n\nexport const Header = styled.header`\n  grid-row: ${gridLines.headerTop} / ${gridLines.headerBottom};\n  grid-column: ${gridLines.contentStart} / ${gridLines.navEnd};\n`;\n\nexport const Content = styled.main`\n  grid-row: ${gridLines.contentTop} / ${gridLines.contentBottom};\n  grid-column: ${gridLines.contentStart} / ${gridLines.contentEnd};\n\n  @media (max-width: ${gridSmallMediaWidth}px) {\n    grid-column: ${gridLines.contentStart} / ${gridLines.navEnd};\n  }\n`;\n\nexport const ContentFull = styled.main`\n  grid-row: ${gridLines.contentTop} / ${gridLines.contentBottom};\n  grid-column: ${gridLines.contentStart} / ${gridLines.navEnd};\n`;\n\nexport const NavContainer = styled.nav`\n  grid-row: ${gridLines.contentTop} / ${gridLines.contentBottom};\n  grid-column: ${gridLines.navStart} / ${gridLines.navEnd};\n  position: relative;\n  z-index: 200;\n\n  @media (max-width: ${gridSmallMediaWidth}px) {\n    grid-row: ${gridLines.mobileMenuTop} / ${gridLines.mobileMenuBottom};\n    grid-column: ${gridLines.pageLeft} / ${gridLines.pageRight};\n    position: sticky;\n    top: 0;\n  }\n`;\n\nexport const FullWidthFooter = styled.footer`\n  grid-row: ${gridLines.footerTop} / ${gridLines.footerBottom};\n  grid-column: ${gridLines.pageLeft} / ${gridLines.pageRight};\n`;\nexport const FullWidthFooterContent = styled.footer`\n  max-width: ${contentMaxWidth + navMaxWidth}px;\n  margin: 0 auto;\n`;\n\n","import { createGlobalStyle } from 'styled-components/macro';\nimport {\n  baseColor,\n  lightBaseColor,\n  semiBoldFontBoldWeight,\n  primaryFont,\n} from './styleUtils';\n\nconst GlobalStyles = createGlobalStyle`\n  @media(max-width: 600px) {\n    html {\n      font-size: 14px;\n    }\n  }\n  @media(max-width: 450px) {\n    html {\n      font-size: 12px;\n    }\n  }\n\n  body {\n    font-family: ${primaryFont};\n    color: ${baseColor};\n    margin: 0;\n    padding: 0;\n  }\n\n  h1 {\n    font-weight: ${semiBoldFontBoldWeight};\n    font-size: 1.7rem;\n  }\n\n  h3 {\n    font-weight: ${semiBoldFontBoldWeight};\n    font-size: 1.1rem;\n    color: ${lightBaseColor};\n  }\n\n  p {\n    line-height: 1.5;\n    margin: 0 0 1rem;\n  }\n\n  button {\n    cursor: pointer;\n    border: none;\n    width: auto;\n    text-align: inherit;\n    overflow: visible;\n\n    /* Normalize 'line-height'. Cannot be changed from 'normal' in Firefox 4+. */\n    line-height: normal;\n\n    /* Corrects font smoothing for webkit */\n    -webkit-font-smoothing: inherit;\n    -moz-osx-font-smoothing: inherit;\n\n    /* Corrects inability to style clickable 'input' types in iOS */\n    -webkit-appearance: none;\n\n    /* Remove excess padding and border in Firefox 4+ */\n    &::-moz-focus-inner {\n        border: 0;\n        padding: 0;\n    }\n  }\n\n  ol {\n    padding-left: 1rem;\n\n    li {\n      margin-bottom: 0.6rem;\n      font-size: 0.9rem;\n    }\n  }\n`;\n\nexport default GlobalStyles;\n","import React, {\n  Suspense,\n  createContext,\n  lazy,\n  useState,\n  useEffect,\n} from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport GlobalStyles from './styling/GlobalStyles';\nimport Helmet from 'react-helmet';\nimport { Root } from './styling/Grid';\nimport { Routes } from './routing/routes';\nimport debounce from 'lodash/debounce';\nimport './styling/fonts/fonts.css';\nimport Loading from './components/general/Loading';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\nconst LandingPage = lazy(() => import('./pages/landingPage'));\nconst AlbaniaTool = lazy(() => import('./pages/albaniaTool'));\nconst JordanTool = lazy(() => import('./pages/jordanTool'));\nconst PageNotFound = lazy(() => import('./pages/pageNotFound'));\n\nexport interface IAppContext {\n  windowWidth: number;\n}\n\nexport const AppContext = createContext<IAppContext>({windowWidth: window.innerWidth});\n\nconst client = new ApolloClient({\n  uri: 'https://hgl-app-staging.cid-labs.com/graphql',\n});\n\nfunction App() {\n\n  const [windowWidth, setWindowWidth] = useState<number>(window.innerWidth);\n\n  const appContext = {windowWidth};\n\n\n  useEffect(() => {\n    const updateWindowWidth = debounce(() => {\n      setWindowWidth(window.innerWidth);\n    }, 500);\n    window.addEventListener('resize', updateWindowWidth);\n    return () => {\n      window.removeEventListener('resize', updateWindowWidth);\n    };\n  }, []);\n\n  const defaultMetaTitle = 'Country Tools - The Growth Lab at Harvard Kennedy School';\n  const defaultMetaDescription = 'Explore the Country Tools from the Growth Lab at Harvard Kennedy School';\n\n  // REMOVE THIS ONCE WE MOVE TO AWS\n  const basename = window.location.host === 'cid-harvard.github.io'\n    ? '/country-tools-front-end' : undefined;\n\n  return (\n    <>\n      <AppContext.Provider value={appContext}>\n        <Helmet>\n          {/* Set default meta data values */}\n          <title>{defaultMetaTitle}</title>\n          <meta name='description' content={defaultMetaDescription} />\n          <meta property='og:title' content={defaultMetaTitle} />\n          <meta property='og:description' content={defaultMetaDescription} />\n        </Helmet>\n        <ApolloProvider client={client}>\n          <Router basename={basename}>\n            <Root>\n              <GlobalStyles />\n              <Suspense fallback={<Loading />}>\n                <Switch>\n                  <Route exact path={Routes.Landing}\n                    render={(props: any) => <LandingPage {...props} />}\n                  />\n                  <Route exact path={Routes.AlbaniaTool}\n                    render={(props: any) => <AlbaniaTool {...props} />}\n                  />\n                  <Route exact path={Routes.JordanTool}\n                    render={(props: any) => <JordanTool {...props} />}\n                  />\n                  {/* If none of the above routes are found show the 404 page */}\n                  <Route component={PageNotFound} />\n                </Switch>\n              </Suspense>\n            </Root>\n          </Router>\n        </ApolloProvider>\n      </AppContext.Provider>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport styled, {keyframes} from 'styled-components/macro';\n\nconst Root = styled.div`\n  background-color: #fbfbfb;\n  grid-column: 1 / -1;\n  grid-row: 1 / -1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst Ring = styled.div`\n  display: inline-block;\n  position: relative;\n  width: 80px;\n  height: 80px;\n`;\nconst animation = keyframes`\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst ChildBase = styled.div`\n  box-sizing: border-box;\n  display: block;\n  position: absolute;\n  width: 64px;\n  height: 64px;\n  margin: 8px;\n  border: 8px solid #bebebe;\n  border-radius: 50%;\n  animation: ${animation} 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n  border-color: #bebebe transparent transparent transparent;\n`;\n\nconst FirstChild = styled(ChildBase)`\n  animation-delay: -0.45s;\n`;\nconst SecondChild = styled(ChildBase)`\n  animation-delay: -0.3s;\n`;\nconst ThirdChild = styled(ChildBase)`\n  animation-delay: -0.15s;\n`;\n\nconst Text = styled.div`\n  margin-top: 2rem;\n  color: #333;\n`;\n\nconst Loading = () => {\n  return (\n    <Root>\n      <Ring>\n        <FirstChild></FirstChild>\n        <SecondChild></SecondChild>\n        <ThirdChild></ThirdChild>\n        <ChildBase></ChildBase>\n      </Ring>\n      <Text>Loading...</Text>\n    </Root>\n  );\n};\n\nexport default Loading;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}